前後端介面

1. 登入
2. 初始化
3. 個人設定
	a. 個人上傳設定 僅簽名檔
	b. 通知所有好友，此人修改
4. 要求匿名連線
	a. 陌生人
	b. 隨機臉書好友
	c. 朋友的朋友
5. 聊天、對話間進行操作（與好友or陌生人or隨機臉書好友）
	a. 互傳訊息
	b. 斷線（陌生人）
	c. bonbon（陌生人）
	d. 歷史（好友）
	e. 已讀
	f. 上下線
6. 好友
	a. 成為好友
	b. 刪好友 X
	c. 修改好友名字
7. 好友資料 撲克牌假名
8. 傳圖 （暫時不做） X
9. 得到超連結的元訊息

websocket 強在不需要進行輪詢，若沒有伺服器需要主動傳訊息的狀況，是可以考慮用AJAX來做
websocket使用異步回覆

傳輸方式
1. 登入使用FB oauth，登入後記錄access_token，即其到期時間，在此之前用網站本身的session去記是否登入
2. websocket
3. websocket
4. websocket
5. websocket
6. websocket
7. 塞網址
8.
9. AJAX

API 實體
1. GET /
2.  websocket onopen
	{"Cmd": "init",
	"OK": true or false
	"Setting": {"Sign": "XXXXXXX"},
    "Friends": [{"ID": XXXXXX, "Sign": "XXXXXXX", "Nick": "XXXXX", Status: "on or off", LastRead: 時間（字串）}, ...]}
3.
	a. {"Cmd": "setting", "Setting": {"Sign": "XXXXXX"}}
       {"OK": true, "Cmd": "setting", "Setting": {"Sign": "XXXXXXX"}}
	b. 伺服器主動 {"Cmd": "change_sign", "Who": "對方id", "Sign": "XXXXXX"}

4.  請求 {"Cmd": "connect", "Type": "L1_FB_friend or L2_FB_friend or stranger"} // 修改使之類似bonbon
	回應 {"OK": true or fase, "Cmd": "connect"}
	伺服器主動：{"Cmd": "connected", "Sign": "XXXXXXX"}
5.
	a. 請求 {"Cmd": "send", "Who": "對方id or 0(stranger)", "Msg": "XXXXXXX", "Order": XXX}
	   回應 {"OK": true, "Cmd": "send", "Who": "對方id or 0(stranger)", "Msg": "XXXXXXX", "Time": XXXXXX, "Order": XX}
	   伺服器主動 {"Cmd": "sendFromServer", "Who": "原id or 0(stranger)", "Time": XXXXX, "Msg": "XXXXXXXX"}
    說明：
		Who 為 0 則為陌生人
		order並非訊息的絕對order，而是請求的序號，用於協助判斷此回應是要回給哪一個請求
	b. 請求 {"Cmd": "disconnect"}
	   回應 {"OK": true, "Cmd": "disconnect"}
	   伺服器主動斷另一邊 {"Cmd": "disconnected"}
	c. 請求 {"Cmd": "bonbon"}
	   回應 {"OK": true, "Cmd": "bonbon"}
	d. 請求 {"Cmd": "history", "With_who": "對方id", "Number": XX, "When": XXXXXXX, "Order": XXX}
	   回應 {"Cmd": "history", "With_who": "對方id", "Number": XX, "Order": XXX,
	         "Msgs": [{"From": "哪個id的傳的", "Text": "XXXXXXX", Time: XXXXXXXX}]}
	   number為要從這個時間起往前多少個
	   order並非訊息的絕對order，而是請求的序號，用於協助判斷此回應是要回給哪一個請求
	e. 請求 {"Cmd": "read", "With_who": "對方id"}
	   回應 {"OK": true, Cmd": "read", "With_who": "對方id", Time: 讀取之時間}
	f. onopen
	伺服器主動 {"Cmd": "status", "Who": "對方id", "Status": "on or off"}
6.
	a. 伺服器主動 {"Cmd": "new_friend", "Who": "對方id", "Nick": "XXXXX"}       伺服器先送假暱稱
	b.
	c. 請求 {"Cmd": "change_friend_nick", "Who": "對方id", "Nick": "XXXXX"}
	   回應 {"OK": true, Cmd": "change_friend_nick"}

9. GET /meta?protocal=xxxx&url=xxxxxxxxx
	說明 protocal為http或https
	例：要取得slack的元訊息，則GET /meta?protocal=https&url=slack.com
	回應 {"site_name": "XXX", "title": "XXX", "description": "XXXX", "image": "XXXXXX"}
	屬性對應的標籤為
	site_name   -> <meta property="og:site_name">
	title       -> <meta property="og:title">       若無則用 <title>
	description -> <meta property="og:description"> 若無則用 <meta neme="description">
	image       -> <meta property="og:image">
